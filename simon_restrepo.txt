-- TABLE SPACE & SESSION 
/*
Create a tablespace named "mid_term" with one datafile, 
the datafile should have your last_name and the 
size of the datafile is 25Mb.
*/
CREATE TABLESPACE mid_term DATAFILE 
'simon.dbf' SIZE 25M
AUTOEXTEND ON NEXT 1000K MAXSIZE 2048M
EXTENT MANAGEMENT LOCAL 
SEGMENT SPACE MANAGEMENT AUTO
ONLINE;

/*
Create a profile named "exam" with 4 failed 
attempts of login and 10 minutes of idle time.
*/
CREATE PROFILE exam LIMIT
SESSIONS_PER_USER 1
CPU_PER_SESSION UNLIMITED
CPU_PER_CALL UNLIMITED
CONNECT_TIME 240
IDLE_TIME 10
PRIVATE_SGA 20 M
FAILED_LOGIN_ATTEMPTS 4
PASSWORD_LIFE_TIME 40
PASSWORD_REUSE_MAX 4
PASSWORD_LOCK_TIME 1
PASSWORD_GRACE_TIME 2;

/*
Create a user named "ejercicios" 
with unlimited space in the tablespace, associated to the exam profile.
*/
CREATE USER ejercicios IDENTIFIED BY ejercicios
DEFAULT TABLESPACE  mid_term
PROFILE exam
QUOTA UNLIMITED ON mid_term;

GRANT CREATE SESSION TO ejercicios;

-- FUNCTIONS

/*
1. (2.0) You will write a simple function that takes 3
inputs a, b, c and returns a concatenated with a * b 
concatenated with 'andres' if b >= c otherwise "martinez". 
Seperate them with /. The name of the function should be function_1

For example:

function_1(1,2,3) --returns "1/2/martinez"
function_1(3,2,1) --returns "3/6/andres"
*/

CREATE OR REPLACE Function function_1
   ( a int,
     b int,
     c int
   )
   RETURN varchar2
IS
    data_returns VARCHAR2(242);
    name varchar2(10) := 'andres';
    last_name varchar2(10) := 'martinez';
BEGIN


    data_returns := to_CHAR(a) || '/';
    
    if b >= c then
        data_returns := data_returns || (to_CHAR(a * b) || '/' || name);
    else
        data_returns := data_returns || (to_CHAR(a * b) || '/' || last_name);
    end if;

    RETURN data_returns;
    
END;

select function_1(2,2,3) from dual;  
select function_1(3,2,1) from dual;


/*
2. (2.0) you will write a function that receives three strings a, b, c and return the following:

* if a is a palindrome number, return true or false otherwise;
* the string b with alternated case; character at index 0 will be lowercase, followed by upper, and so on; indices start with 0.
* number of vowels in string c. Vowels are one of "aeiou".
* the length of all three parameters.

You will need to use several string methods to solve this.

For this exercise probably you need to create:
* A function to know if a number is palindrome or is not. You can adapt this https://www.thecrazyprogrammer.com/2017/08/plsql-program-palindrome-number.html
* A function(s) or procedure to iterate through each char of the string. You can adapt this https://stackoverflow.com/a/32570586

The result look like this, seperated by "/":

function_2(12321,"martinez","amanac") = "true/mArTiNeZ/3/19"

The name of the function should be function_2.
*/


CREATE OR REPLACE Function is_palindrome(
    n number)
    return varchar2
is 
    m number;
    aux number;
    rev number := 0;
    r number;
    is_palindrome varchar2(10);
begin
    
    m := n;
    aux := n;
    
    while aux>0
    loop
        r:=mod(aux,10);
        rev:=(rev*10)+r;
        aux:=trunc(aux/10);
    end loop;
    
    if m=rev
    then
        is_palindrome := 'true';
    else
        is_palindrome := 'false';
    end if;
    
    return is_palindrome;
end;

CREATE OR REPLACE Function count_vowels(
    n varchar2)
    return varchar2
is 
begin

    return regexp_count(n, '[aeiou]', 1, 'i');
end;


CREATE OR REPLACE Function function_2(
    a number,
    b varchar2,
    c varchar2
    )
    return varchar2
is 
    final_data varchar2(500);
begin
    final_data :=  is_palindrome(a) || '/' || count_vowels(c) || '/';
    return final_data;
end;


select function_2(12321,'martinez','amanac') from dual;